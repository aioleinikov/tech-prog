#include <iostream>#include <functional>#include <cstdlib>   // Для функций srand() и rand()#include <ctime>     // Для функции time()// Используем пространство имен std для упрощения кодаusing namespace std;// Узел односвязного спискаstruct ListPart {    int data;       // Данные, хранящиеся в узле    ListPart* next; // Указатель на следующий узел    // Конструктор узла    ListPart(int data) : data(data), next(nullptr) {}};// Класс односвязного спискаclass LinkedList {private:    ListPart* first; // Указатель на первый элемент списка    ListPart* last;  // Указатель на последний элемент списка    int size;        // Размер спискаpublic:    // Конструктор    LinkedList() : first(nullptr), last(nullptr), size(0) {}    // Деструктор    ~LinkedList() {        clear();    }    // Очистка списка    void clear() {        ListPart* current = first;        while (current != nullptr) {            ListPart* next = current->next;            delete current;            current = next;        }        first = nullptr;        last = nullptr;        size = 0;    }    // Создать список с n элементами (рандомные значения)    void createList(int n) {        clear();        srand(time(nullptr)); // Инициализация генератора случайных чисел        for (int i = 0; i < n; ++i) {            addLast(rand() % 100); // Добавляем случайные числа от 0 до 99        }    }    // Добавить элемент в начало списка    void addFirst(int data) {        ListPart* newPart = new ListPart(data);        newPart->next = first;        first = newPart;        if (last == nullptr) {            last = newPart;        }        size++;    }    // Добавить элемент в конец списка    void addLast(int data) {        ListPart* newPart = new ListPart(data);        if (last != nullptr) {            last->next = newPart;        }        last = newPart;        if (first == nullptr) {            first = newPart;        }        size++;    }    // Добавить элемент по индексу    void add(int index, int data) {        if (index < 0 || index > size) {            cerr << "Индекс вне границ" << endl;            return;        }        if (index == 0) {            addFirst(data);            return;        }        if (index == size) {            addLast(data);            return;        }        ListPart* newPart = new ListPart(data);        ListPart* current = first;        for (int i = 0; i < index - 1; ++i) {            current = current->next;        }        newPart->next = current->next;        current->next = newPart;        size++;    }    // Удалить первый элемент списка    void removeFirst() {        if (first == nullptr) {            cerr << "Список пуст" << endl;            return;        }        ListPart* temp = first;        first = first->next;        if (first == nullptr) {            last = nullptr;        }        delete temp;        size--;    }    // Удалить последний элемент списка    void removeLast() {        if (first == nullptr) {            cerr << "Список пуст" << endl;            return;        }        if (first == last) {            delete first;            first = nullptr;            last = nullptr;        } else {            ListPart* current = first;            while (current->next != last) {                current = current->next;            }            delete last;            last = current;            last->next = nullptr;        }        size--;    }    // Удалить элемент по индексу    void remove(int index) {        if (index < 0 || index >= size) {            cerr << "Индекс вне границ" << endl;            return;        }        if (index == 0) {            removeFirst();            return;        }        ListPart* current = first;        for (int i = 0; i < index - 1; ++i) {            current = current->next;        }        ListPart* temp = current->next;        current->next = temp->next;        if (temp == last) {            last = current;        }        delete temp;        size--;    }    // Обновить элемент по индексу    void update(int index, int data) {        if (index < 0 || index >= size) {            cerr << "Индекс вне границ" << endl;            return;        }        ListPart* current = first;        for (int i = 0; i < index; ++i) {            current = current->next;        }        current->data = data;    }    // Найти элемент по индексу    ListPart* find(int index) {        if (index < 0 || index >= size) {            cerr << "Индекс вне границ" << endl;            return nullptr;        }        ListPart* current = first;        for (int i = 0; i < index; ++i) {            current = current->next;        }        return current;    }    // Найти элемент по фильтру и вернуть индекс    int findIndex(function<bool(int)> filter) {        ListPart* current = first;        int index = 0;        while (current != nullptr) {            if (filter(current->data)) {                return index;            }            current = current->next;            index++;        }        return -1; // Элемент не найден    }    // Вывод списка    void printList() {        ListPart* current = first;        while (current != nullptr) {            cout << current->data << " ";            current = current->next;        }        cout << endl;    }};// Функция для отображения меню и выполнения выбранных действийvoid menu() {    LinkedList list;    int choice, data, index, n;    do {        cout << "Меню:\n";        cout << "1. Создать список\n";        cout << "2. Вывести список\n";        cout << "3. Добавить в начало\n";        cout << "4. Добавить по индексу\n";        cout << "5. Добавить в конец\n";        cout << "6. Удалить первый\n";        cout << "7. Удалить последний\n";        cout << "8. Удалить по индексу\n";        cout << "9. Обновить по индексу\n";        cout << "10. Найти элемент по индексу\n";        cout << "11. Найти элемент по фильтру\n";        cout << "12. Выйти\n";        cout << "Выберите действие: ";        cin >> choice;        switch (choice) {            case 1:                cout << "Введите количество элементов: ";                cin >> n;                list.createList(n);                list.printList();                break;            case 2:                list.printList();                break;            case 3:                cout << "Введите данные: ";                cin >> data;                list.addFirst(data);                list.printList();                break;            case 4:                cout << "Введите индекс: ";                cin >> index;                cout << "Введите данные: ";                cin >> data;                list.add(index, data);                list.printList();                break;            case 5:                cout << "Введите данные: ";                cin >> data;                list.addLast(data);                list.printList();                break;            case 6:                list.removeFirst();                list.printList();                break;            case 7:                list.removeLast();                list.printList();                break;            case 8:                cout << "Введите индекс: ";                cin >> index;                list.remove(index);                list.printList();                break;            case 9:                cout << "Введите индекс: ";                cin >> index;                cout << "Введите новые данные: ";                cin >> data;                list.update(index, data);                list.printList();                break;            case 10:                cout << "Введите индекс: ";                cin >> index;                {                    ListPart* foundNode = list.find(index);                    if (foundNode != nullptr) {                        cout << "Элемент на индексе " << index << ": " << foundNode->data << endl;                    } else {                        cout << "Элемент не найден" << endl;                    }                }                break;            case 11:                cout << "Введите значение для поиска: ";                cin >> data;                {                    int foundIndex = list.findIndex([data](int d) { return d == data; });                    if (foundIndex != -1) {                        cout << "Найден элемент с индексом " << foundIndex << " и значением " << data << endl;                    } else {                        cout << "Элемент не найден" << endl;                    }                }                break;            case 12:                cout << "Выход" << endl;                break;            default:                cerr << "Неверный выбор, попробуйте снова." << endl;                break;}} while (choice != 12);}int main() {menu();return 0;}